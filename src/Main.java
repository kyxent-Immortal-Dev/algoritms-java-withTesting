import java.util.*;

/**
 * El C√°liz de los C√≥digos Perdidos
 * Proyecto Java que implementa algoritmos de ordenamiento y b√∫squeda
 * para descifrar el mensaje secreto del or√°culo.
 *
 * @author Ezequiel Campos
 * @version 1.0
 */
public class Main {
    private static final String[] MENSAJES_SECRETOS = {
            "El portal al reino sumergido se abrir√° cuando el sol cruce la cima del monte hueco.",
            "Bajo la tercera luna de piedra, encontrar√°s la biblioteca olvidada del conocimiento prohibido.",
            "El mapa del tesoro est√° oculto en la √∫ltima p√°gina del c√≥dice rojo, sellado por el sabio Alerion.",
            "La llave dorada del tiempo se encuentra donde los tres r√≠os convergen en uno solo.",
            "El √∫ltimo guardi√°n duerme en la c√°mara de cristal, esperando al elegido que porte la marca ancestral."
    };

    private int[] numeros;
    private int claveMagica;
    private String mensajeSecreto;
    private Random random;

    public Main() {
        this.random = new Random();
        inicializarDatos();
    }

    /**
     * Inicializa el array de n√∫meros aleatorios y selecciona la clave m√°gica
     * Complejidad: O(n) donde n = 1000
     */
    private void inicializarDatos() {
        // Generar array de 1000 n√∫meros aleatorios entre 1000 y 9999
        numeros = new int[1000];
        Set<Integer> numerosUnicos = new HashSet<>();

        // Asegurar que todos los n√∫meros sean √∫nicos
        while (numerosUnicos.size() < 1000) {
            numerosUnicos.add(random.nextInt(9000) + 1000); // 1000-9999
        }

        int index = 0;
        for (int numero : numerosUnicos) {
            numeros[index++] = numero;
        }

        // Seleccionar clave m√°gica aleatoria
        claveMagica = numeros[random.nextInt(numeros.length)];
        mensajeSecreto = MENSAJES_SECRETOS[random.nextInt(MENSAJES_SECRETOS.length)];

        System.out.println("üßô El C√°liz de los C√≥digos Perdidos ha sido inicializado...");
        System.out.println("Array de " + numeros.length + " n√∫meros m√°gicos generado.");
        System.out.println("Una clave secreta ha sido elegida por el or√°culo...\n");
    }

    /**
     * Algoritmo QuickSort para ordenar el array
     * Complejidad promedio: O(n log n)
     * Complejidad peor caso: O(n¬≤)
     * Complejidad espacio: O(log n) por la recursi√≥n
     */
    public void quickSort(int[] arr, int bajo, int alto) {
        if (bajo < alto) {
            // Particionar y obtener el √≠ndice del pivote
            int indicePivote = particion(arr, bajo, alto);

            // Ordenar recursivamente los elementos antes y despu√©s del pivote
            quickSort(arr, bajo, indicePivote - 1);
            quickSort(arr, indicePivote + 1, alto);
        }
    }

    /**
     * Funci√≥n auxiliar para particionar en QuickSort
     * Utiliza el √∫ltimo elemento como pivote
     */
    private int particion(int[] arr, int bajo, int alto) {
        int pivote = arr[alto]; // √öltimo elemento como pivote
        int i = (bajo - 1); // √çndice del elemento m√°s peque√±o

        for (int j = bajo; j < alto; j++) {
            // Si el elemento actual es menor o igual al pivote
            if (arr[j] <= pivote) {
                i++;
                intercambiar(arr, i, j);
            }
        }

        intercambiar(arr, i + 1, alto);
        return i + 1;
    }

    /**
     * Funci√≥n auxiliar para intercambiar elementos
     */
    private void intercambiar(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    /**
     * Algoritmo MergeSort para ordenar el array
     * Complejidad: O(n log n) en todos los casos
     * Complejidad espacio: O(n) para el array auxiliar
     */
    public void mergeSort(int[] arr, int izquierda, int derecha) {
        if (izquierda < derecha) {
            int medio = izquierda + (derecha - izquierda) / 2;

            // Ordenar primera y segunda mitad
            mergeSort(arr, izquierda, medio);
            mergeSort(arr, medio + 1, derecha);

            // Fusionar las mitades ordenadas
            merge(arr, izquierda, medio, derecha);
        }
    }

    /**
     * Funci√≥n auxiliar para fusionar dos subarrays ordenados
     */
    private void merge(int[] arr, int izquierda, int medio, int derecha) {
        // Tama√±os de los subarrays a fusionar
        int n1 = medio - izquierda + 1;
        int n2 = derecha - medio;

        // Arrays temporales
        int[] izq = new int[n1];
        int[] der = new int[n2];

        // Copiar datos a arrays temporales
        for (int i = 0; i < n1; ++i)
            izq[i] = arr[izquierda + i];
        for (int j = 0; j < n2; ++j)
            der[j] = arr[medio + 1 + j];

        // Fusionar los arrays temporales
        int i = 0, j = 0;
        int k = izquierda;

        while (i < n1 && j < n2) {
            if (izq[i] <= der[j]) {
                arr[k] = izq[i];
                i++;
            } else {
                arr[k] = der[j];
                j++;
            }
            k++;
        }

        // Copiar elementos restantes
        while (i < n1) {
            arr[k] = izq[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = der[j];
            j++;
            k++;
        }
    }

    /**
     * B√∫squeda binaria para encontrar un elemento en el array ordenado
     * Complejidad: O(log n)
     * Complejidad espacio: O(1)
     *
     * @param arr Array ordenado donde buscar
     * @param objetivo N√∫mero a buscar
     * @return √çndice del elemento si se encuentra, -1 si no existe
     */
    public int busquedaBinaria(int[] arr, int objetivo) {
        int izquierda = 0;
        int derecha = arr.length - 1;

        while (izquierda <= derecha) {
            int medio = izquierda + (derecha - izquierda) / 2;

            // Si encontramos el elemento
            if (arr[medio] == objetivo) {
                return medio;
            }

            // Si el objetivo es mayor, ignorar la mitad izquierda
            if (arr[medio] < objetivo) {
                izquierda = medio + 1;
            }
            // Si el objetivo es menor, ignorar la mitad derecha
            else {
                derecha = medio - 1;
            }
        }

        return -1; // Elemento no encontrado
    }

    /**
     * Mide el tiempo de ejecuci√≥n de los algoritmos de ordenamiento
     */
    public void compararAlgoritmos() {
        System.out.println("üìä AN√ÅLISIS DE RENDIMIENTO DE ALGORITMOS\n");

        // Crear copias del array para cada algoritmo
        int[] arrayQuick = Arrays.copyOf(numeros, numeros.length);
        int[] arrayMerge = Arrays.copyOf(numeros, numeros.length);

        // Medir QuickSort
        long inicioQuick = System.nanoTime();
        quickSort(arrayQuick, 0, arrayQuick.length - 1);
        long finQuick = System.nanoTime();
        long tiempoQuick = finQuick - inicioQuick;

        // Medir MergeSort
        long inicioMerge = System.nanoTime();
        mergeSort(arrayMerge, 0, arrayMerge.length - 1);
        long finMerge = System.nanoTime();
        long tiempoMerge = finMerge - inicioMerge;

        // Mostrar resultados
        System.out.println("‚ö° QuickSort:");
        System.out.println("   Tiempo: " + (tiempoQuick / 1_000_000.0) + " ms");
        System.out.println("   Complejidad promedio: O(n log n)");
        System.out.println("   Complejidad peor caso: O(n¬≤)");

        System.out.println("\n‚ö° MergeSort:");
        System.out.println("   Tiempo: " + (tiempoMerge / 1_000_000.0) + " ms");
        System.out.println("   Complejidad: O(n log n) garantizada");

        // Usar el array ordenado por MergeSort para el resto del programa
        numeros = arrayMerge;

        System.out.println("\nüéØ Array ordenado exitosamente usando " +
                (tiempoMerge < tiempoQuick ? "MergeSort" : "QuickSort") +
                " (m√°s r√°pido en esta ejecuci√≥n)\n");
    }

    /**
     * Ejecuta el juego principal donde el usuario busca la clave m√°gica
     */
    public void ejecutarJuego() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("üîÆ EL DESAF√çO DEL OR√ÅCULO");
        System.out.println("El or√°culo ha ocultado un mensaje entre los n√∫meros m√°gicos.");
        System.out.println("Debes encontrar la clave correcta para revelarlo.\n");

        // Mostrar algunos n√∫meros como pista
        System.out.println("üí° Pistas - Algunos n√∫meros del c√°liz:");
        for (int i = 0; i < Math.min(20, numeros.length); i += numeros.length / 20) {
            System.out.print(numeros[i] + " ");
        }
        System.out.println("...\n");

        int intentos = 0;
        int maxIntentos = 5;

        while (intentos < maxIntentos) {
            System.out.print("üîç Ingresa el n√∫mero m√°gico (intento " + (intentos + 1) + "/" + maxIntentos + "): ");

            try {
                int numeroUsuario = scanner.nextInt();
                intentos++;

                // Medir tiempo de b√∫squeda binaria
                long inicioBusqueda = System.nanoTime();
                int indice = busquedaBinaria(numeros, numeroUsuario);
                long finBusqueda = System.nanoTime();

                System.out.println("‚è±Ô∏è  B√∫squeda completada en " +
                        ((finBusqueda - inicioBusqueda) / 1000.0) + " microsegundos");

                if (numeroUsuario == claveMagica) {
                    System.out.println("\nüéâ ¬°FELICITACIONES! Has encontrado la clave m√°gica: " + claveMagica);
                    System.out.println("‚ú® El or√°culo revela su mensaje:");
                    System.out.println("üìú \"" + mensajeSecreto + "\"");
                    System.out.println("\nüèÜ ¬°Has completado exitosamente el desaf√≠o!");
                    break;
                } else if (indice != -1) {
                    System.out.println("‚ùå N√∫mero encontrado en el c√°liz, pero no es la clave m√°gica.");
                } else {
                    System.out.println("‚ùå Ese n√∫mero no existe en el c√°liz de c√≥digos.");
                }

                if (intentos < maxIntentos) {
                    // Dar pista de rango
                    if (numeroUsuario < claveMagica) {
                        System.out.println("üí≠ Pista: La clave m√°gica es mayor que " + numeroUsuario);
                    } else {
                        System.out.println("üí≠ Pista: La clave m√°gica es menor que " + numeroUsuario);
                    }
                }

            } catch (InputMismatchException e) {
                System.out.println("‚ö†Ô∏è  Por favor, ingresa un n√∫mero v√°lido.");
                scanner.nextLine(); // Limpiar buffer
            }
        }

        if (intentos >= maxIntentos) {
            System.out.println("\nüíÄ Se agotaron los intentos. El misterio permanece sin resolver...");
            System.out.println("üîê La clave m√°gica era: " + claveMagica);
            System.out.println("üìú El mensaje perdido: \"" + mensajeSecreto + "\"");
        }

        scanner.close();
    }

    /**
     * Muestra estad√≠sticas del array y algoritmos
     */
    public void mostrarEstadisticas() {
        System.out.println("\nüìà ESTAD√çSTICAS DEL C√ÅLIZ");
        System.out.println("Tama√±o del array: " + numeros.length);
        System.out.println("N√∫mero menor: " + numeros[0]);
        System.out.println("N√∫mero mayor: " + numeros[numeros.length - 1]);
        System.out.println("Clave m√°gica: " + claveMagica);
        System.out.println("Posici√≥n de la clave en array ordenado: " +
                (busquedaBinaria(numeros, claveMagica) + 1));
    }

    public static void main(String[] args) {
        System.out.println("üèõÔ∏è  Bienvenido al C√°liz de los C√≥digos Perdidos");
        System.out.println("=" .repeat(50) + "\n");

        Main juego = new Main();

        // Comparar algoritmos de ordenamiento
        juego.compararAlgoritmos();

        // Mostrar estad√≠sticas
        juego.mostrarEstadisticas();

        // Ejecutar el juego principal
        juego.ejecutarJuego();

        System.out.println("\nüåü Gracias por jugar 'El C√°liz de los C√≥digos Perdidos'");
    }

    // Getters para testing
    public int[] getNumeros() { return numeros; }
    public int getClaveMagica() { return claveMagica; }
    public String getMensajeSecreto() { return mensajeSecreto; }
}